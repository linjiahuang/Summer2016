import numpy as np
import scipy.special as special
#import GenerateData
from returnBeta import multivariateBeta # for returning the multivariate Beta function
import math

numOfTrials = 100000
Sigma_0 = 1
Sigma_1 = 1
test_position = 0

def returnBeta(inputEta):
	"""Returns the 1/B() term in the integral
	"""
	n = len(inputEta)

	result = 1
	for j in range(0, n):
		result = result * multivariateBeta(inputEta[j])

	return result

def returnY(inputY, inputEta):
	n = len(inputEta)
	K = len(inputEta[0])

	result = 1
	for j in range(0, n):
		for k in range(0, K):
			if inputY[j][k] == 0:
				return 0
			result = result * inputY[j][k]**(inputEta[j][k] - 1)

	return result

def returnEta_denom(inputY, sigma):
	n = len(inputY)
	K = len(inputY[0])

	Eta = []
	for j in range(0, n):
		Eta_j = []
		for k in range(0, K):
			eta = np.random.lognormal(0,sigma)
			Eta_j.append(eta)
		Eta.append(Eta_j)

	return Eta

def returnEta_numer(inputX, inputY, sigma_0, sigma_1):
	n = len(inputY)	
	K = len(inputY[0])

	Eta = []
	for j in range(0, n):
		Eta_j = []
		for k in range(0, K):
			eta = np.random.lognormal(0,math.sqrt((inputX[j][test_position]**2) * (sigma_0**2) + sigma_1**2))
			Eta_j.append(eta)
		Eta.append(Eta_j)

	return Eta

def BFDenominator(inputY):
	totalSum = 0

	for i in range(0, numOfTrials):
		inputEta = returnEta_denom(inputY, Sigma_0)
		totalSum = totalSum + returnBeta(inputEta) * returnY(inputY, inputEta)

	return totalSum/numOfTrials

def BFNumerator(inputX, inputY):
	totalSum = 0

	for i in range(0, numOfTrials):
		inputEta = returnEta_numer(inputX, inputY, Sigma_0, Sigma_1)
		totalSum = totalSum + returnBeta(inputEta) * returnY(inputY, inputEta)

	return totalSum/numOfTrials

"""
# first argument is lociCount, second is number of individuals
resultX = GenerateData.generateInputX(4, 10)
print(resultX)
print("\n")

# second argument is number of isoforms
resultEta = GenerateData.generateEta(resultX, 2)
resultY = GenerateData.generateY(resultEta)

print(resultY)
print("\n")
"""

fixResultX = [[2, 2, 2, 2], [0, 0, 2, 0], [2, 0, 1, 2], [0, 1, 2, 2], [2, 2, 0, 0], [0, 1, 2, 1], [1, 1, 2, 1], [2, 0, 1, 2], [1, 0, 0, 0], [2, 2, 2, 0], [0, 2, 1, 2], [1, 2, 2, 2], [2, 2, 0, 1], [0, 1, 1, 0], [1, 2, 2, 0], [2, 0, 2, 1], [2, 1, 1, 1], [0, 2, 0, 1], [1, 1, 2, 1], [2, 0, 1, 0], [1, 2, 2, 2], [2, 0, 1, 1], [0, 1, 1, 0], [0, 0, 0, 1], [2, 1, 1, 0], [1, 0, 0, 2], [1, 0, 1, 0], [2, 1, 1, 2], [0, 2, 0, 1], [2, 1, 2, 0], [2, 0, 2, 2], [0, 0, 1, 0], [0, 0, 0, 2], [1, 0, 1, 1], [1, 2, 2, 2], [1, 1, 0, 1], [0, 0, 0, 0], [1, 0, 2, 2], [1, 2, 1, 0], [2, 0, 2, 1], [2, 1, 1, 2], [0, 1, 2, 0], [2, 1, 1, 2], [1, 1, 2, 2], [0, 1, 1, 1], [1, 0, 1, 0], [0, 2, 0, 2], [0, 2, 1, 1], [0, 0, 2, 2], [0, 2, 1, 0]]

fixResultY = [[0.03975615598893078, 0.960242133017074, 1.710993995383012e-06], [0.995335244254006, 0.0014876802619384205, 0.003177075484055581], [0.5599724440975495, 0.13862503267665527, 0.3014025232257953], [0.15730877489406314, 0.8201273628665614, 0.022563862239375378], [0.1094322752879228, 0.0005838434366801086, 0.8899838812753972], [0.009934512236318131, 0.003107285990608998, 0.9869582017730728], [0.014866592074713273, 0.18322456561349895, 0.8019088423117878], [6.543383660481705e-08, 0.09788685434513308, 0.9021130802210303], [0.7585256534563821, 0.24097674773141323, 0.0004975988122048253], [3.264459759540923e-39, 0.9675208080616501, 0.032479191938349916], [0.7343783057209804, 0.26562169415991826, 1.1910136923380096e-10], [0.8187447518694871, 1.054559678908333e-67, 0.18125524813051286], [0.9999709574789075, 2.9947550971021644e-09, 2.9039526337436022e-05], [0.11803569716352091, 0.8819518476650902, 1.2455171388863236e-05], [0.2158094272986052, 1.5033112064916613e-11, 0.7841905726863617], [0.32045073794706613, 0.679549262052934, 1.3332378899686774e-300], [0.8513251404261309, 0.14808720282046095, 0.0005876567534081182], [0.03449275356485432, 0.1921387377348218, 0.7733685087003239], [0.09726617156497067, 0.8644117738313964, 0.03832205460363287], [0.0055572065478206615, 0.9727229622219442, 0.02171983123023516], [0.014640797978950655, 0.02625318465077188, 0.9591060173702776], [0.00028597314357094156, 0.8386539803717268, 0.16106004648470243], [0.9964348830786478, 0.0027647999139193574, 0.0008003170074329029], [0.014936394188232687, 0.30029982565303115, 0.6847637801587363], [0.4167055840494481, 0.3225500598570691, 0.2607443560934828], [0.02738231342944056, 0.6430709432600893, 0.32954674331047024], [3.794813589243749e-21, 0.9070769628111942, 0.09292303718880579], [0.25596714703825535, 0.08768731204250675, 0.6563455409192379], [0.5836621310116408, 0.11160976592567562, 0.3047281030626836], [0.0051167740197197945, 7.855729530284195e-07, 0.9948824404073272], [0.017363221577872963, 0.9818101594177652, 0.000826619004361862], [0.36300717999393683, 0.2184061355723347, 0.41858668443372854], [0.010101013684295033, 0.9571617959848896, 0.03273719033081527], [0.1820882271326943, 0.7007255948897031, 0.11718617797760275], [0.012324232480949963, 0.035010437374275755, 0.9526653301447742], [0.5532109335528149, 0.3038162430106454, 0.1429728234365397], [0.07128914435993607, 0.5521505843399229, 0.37656027130014097], [0.4633765018738179, 0.04037121669247705, 0.49625228143370503], [0.005081092662822489, 0.3469757367335367, 0.6479431706036409], [0.586134917020701, 0.00026270571853869053, 0.4136023772607604], [0.3025676903271866, 0.03650034034226656, 0.6609319693305468], [0.9999986651569829, 9.328516835709392e-07, 4.019913336509788e-07], [0.0209276983860774, 0.747931506201291, 0.2311407954126316], [0.05794144007326893, 0.9400283784485508, 0.0020301814781803476], [0.9725258538116112, 0.027474146188388917, 1.4847228425360289e-49], [0.17599880240405866, 0.822192566793643, 0.0018086308022982596], [0.18626555995584854, 0.5425296038099996, 0.27120483623415176], [0.09453414306715428, 0.2831440657119152, 0.6223217912209305], [0.060875156668089216, 0.9389079833594364, 0.00021685997247424682], [0.0008276736744077228, 0.9497885070730637, 0.04938381925252861]]

numerator = BFNumerator(fixResultX, fixResultY)
denominator = BFDenominator(fixResultY)
print("Numerator:    ", numerator)
print("Denominator:  ", denominator)
print("Bayes Factor: ", numerator/denominator)





